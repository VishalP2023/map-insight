import { HttpParams } from '@angular/common/http';
import { Component, ElementRef, EventEmitter, HostListener, Input, Output, SimpleChanges, ViewChild } from '@angular/core';
import * as moment from 'moment';
import { AlertOptions } from '../../model/alert.model';
import { Pagination } from '../../model/pagination.model';
import { TableHeaderMetaData } from '../../model/table-header-list.model';
import { AlertService } from '../../service/alert.service';

@Component({
  selector: 'app-data-table',
  templateUrl: './data-table.component.html',
  styleUrls: ['./data-table.component.scss']
})
export class DataTableComponent {
  divHeight!: number;
  cardDivHeight!: number;
  divHeightpx!: string;
  @HostListener('window:resize', ['$event'])
  onResize(event: any) {
    this.divHeight = window.innerHeight;
    this.changeDeviceValue();
  }

  @ViewChild('confrimationmodel') confrimationmodel!: ElementRef;

  alertOptions: AlertOptions = { autoClose: true, keepAfterRouteChange: true };
  @Input()
  content: Array<object> = [];
  @Input()
  permission: Array<boolean> = [false, false, false];
  @Input()
  totalPages: any = 0;
  @Input() title :string = "";
  @Input() multiselect: boolean = false
  // FIXME: RENAME: This is not not just columns this contains whole Table Metadata.
  // FIXME: RENAME: This is not not just columns this contains whole Table Metadata.
  @Input()
  columns!: TableHeaderMetaData;
  @Input() height: string = '56vh';
  @Input() cardH: boolean = false;
  @Input() hasOwner: boolean = false;
  // TODO: CHECK: So page search sort and button event are all events generated by data table. Check should this be one event with right model structure.
  @Output() changePageSortSearch = new EventEmitter<HttpParams>();
  // FIXME: RENAME
  @Output() buttonEvent1 = new EventEmitter<object>();
  @Output() select = new EventEmitter<object>();
  @Output() multiselectValue = new EventEmitter<Array<object>>();
  // hasOwner used to get list of based on owner-id


  pagination: Pagination = { pageSize: 15, serchingParmeter: "", sortKey: "", sortType: "ASC", pageNumber: 0 };
  result: number = 0;
  selectedData: any = null;
  selectedDataArray: any[] = [];
  pageList = [];
  idRadio: string | undefined
  constructor(
    // private deleteConfirmationService:DeleteConfirmationService,
    private alertServices: AlertService,
  ) { }

  ngOnChanges(changes: SimpleChanges): void {
    let pageListTemp: any = []
    this.selectedDataArray = [];
    for (let i = 0; i < this.totalPages; i++) {
      pageListTemp.push(i);
    }
    this.pageList = pageListTemp;
    this.selectedData = null;
    this.totalPageMethod()
  }

  ngOnInit() {
    this.changeDeviceValue();
  }
  changeDeviceValue() {
    this.divHeight = window.innerHeight
    this.divHeight = this.divHeight * 0.85
    this.cardDivHeight = this.divHeight
    if (this.cardH) {
      this.cardDivHeight = this.divHeight - 40
    }
  }

  getValue(rowObj: any, mappedBy: String) {
    const myArray = mappedBy.split('.');
    let value = rowObj[myArray[0]];
    if (value != null) {
      for (let i = 1; i < myArray.length; i++) {
        value = value[myArray[i]];
      }
    } else {
      value = "";
    }
    return value;
  }

  getImgValue(rowObj: any, mappedBy: String) {
    const myArray = mappedBy?.split('.');
    let value = rowObj[myArray[0]];
    if (value != null) {
      for (let i = 1; i < myArray.length; i++) {
        value = value[myArray[i]];
      }
    } else {
      value = "";
    }
    let val = value.includes(".pdf")
    if (val) {
      return "assets/images/pdf.png"
    } else {
      return value;
    }

  }

  getIsProfile(rowObj: any, mappedBy: String) {
    const myArray = mappedBy?.split(',');
    let value = rowObj[myArray[0]];
    if (value != "" && value != null) {
      return true;
    } else {
      return false
    }
  }

  getProfile(rowObj: any, mappedBy: String) {
    const myArray = mappedBy.split(',');
    let value = rowObj[myArray[0]];
    if (value != "" && value != null) {
      return value;
    } else {
      let namearray = myArray[1].split(' ');

      let value = rowObj[myArray[1]];
      const name = value.split(' ');
      let myStr = value;
      if (name.length <= 2) {
        myStr = value;
      } else {
        myStr = name[0] + " " + name[1]
      }

      const matches = myStr.match(/\b(\w)/g);
      return matches?.toString().replace(",", "")
    }
  }

  getDate(rowObj: any, mappedBy: String) {
    const myArray = mappedBy.split('.');
    let value = rowObj[myArray[0]];
    for (let i = 1; i < myArray.length; i++) {
      value = value[myArray[i]];
    }
    return moment(value).format('DD/MM/YYYY');
  }

  getValueForBoolen(rowObj: any, mappedBy: String, displayValue: any) {
    const myArray = mappedBy.split('.');
    let a = myArray[0]
    let value = rowObj[a];
    if (value != null) {
      for (let i = 1; i < myArray.length; i++) {
        value = value[myArray[i]];
      }
    } else {
      value = false;
    }
    if (displayValue[0]?.key == value) {
      return displayValue[0].value;
    } else {
      return displayValue[1].value;
    }
  }

  confirmDelete() {
    let data = {
      event: 'delete',
      data: this.selectedData
    }
    this.buttonEvent1.emit(data);
    let deletemodal = document.getElementById('openModalforDelete');
    deletemodal!.style.display = 'none';
  }

  changePageNo(event: any) {
    this.pagination.pageNumber = event;
    this.createUrl();
  }

  sorting(column: any) {
    if (this.pagination.sortKey == column) {
      this.pagination.sortType = this.pagination.sortType == "ASC" ? 'DESC' : 'ASC';
    } else {
      this.pagination.sortKey = column;
      this.pagination.sortType = 'ASC';
    }
    this.pagination.pageNumber = 0;
    this.createUrl();
  }

  pageChange() {
    this.pagination.pageNumber = 0;
    this.createUrl();
  }

  createUrl() {
    let params = new HttpParams();
    params = params.append('page', this.pagination.pageNumber);
    params = params.append('size', this.pagination.pageSize);
    if (this.pagination.serchingParmeter != "" && this.pagination.serchingParmeter != undefined && this.pagination.serchingParmeter != null) {
      params = params.append('name', this.pagination.serchingParmeter);
    }
    if (this.pagination.sortKey != "" && this.pagination.sortKey != null && this.pagination.sortKey != undefined) {
      params = params.append('sort', this.pagination.sortKey + "," + this.pagination.sortType);
    }
    if (this.hasOwner) {
      params = params.append('owner', JSON.parse(sessionStorage.getItem('userDetails')!)?.userId);
    }
    this.changePageSortSearch.emit(params);
  }


  buttonEvent(event: string) {
    let data = {
      event: event,
      data: event == 'add' ? null : this.selectedData
    }

    if (event == 'edit' || event == 'delete' || event == 'view') {

      if (this.selectedData != "" && this.selectedData != undefined && this.selectedData != null) {
        if (event == 'delete') {
          this.confrimationmodel.nativeElement.click();
          return
        }
      } else {
        this.alertServices.error("Please select a record", this.alertOptions);
        return
      }
    }
    this.buttonEvent1.emit(data);
  }

  delete() {
    let data: any = {
      event: 'delete',
      data: this.multiselect ? this.selectedDataArray[0] : this.selectedData,
      pageNumber: this.pagination.pageNumber
    }
    data.pageNumber = this.pagination.pageNumber;
    if (this.content.length == 1 && this.pagination.pageNumber != 0) {
      data.pageNumber = this.pagination.pageNumber - 1;
    }
    this.buttonEvent1.emit(data);
    this.pagination.pageNumber = data.pageNumber;

  }

  btnEventInside(value: any, btnvalue: any) {
    let data = {
      event: 'inSidebtn',
      data: value,
      btnEvent: btnvalue
    }
    this.buttonEvent1.emit(data);
  }
  radioButton(value: any, event: any) {
    event.stopPropagation();
    if (this.multiselect) {
      const index = this.selectedDataArray.findIndex(x => x == value);
      if (index == -1) {
        this.selectedDataArray.push(value)
      } else {
        this.selectedDataArray.splice(index, 1)
      }
      this.multiselectValue.emit(this.selectedDataArray);
    } else {
      this.selectedData = value;
      this.select.emit(value);
    }
  }

  getButtonList(row: any, column: any): any {
    return row[column.mappedBy]
  }

  showDeleteModal() {
    let data = {
      event: 'delete',
      data: this.selectedData,
      pageNumber: this.pagination.pageNumber
    }
  }

  pageNoList: any = []

  totalPageMethod() {
    this.pageNoList = [];
    if (this.totalPages == 0) {
    } else if (this.totalPages <= 5) {
      let i = 0;
      for (i = 0; i < this.totalPages; i++) {
        this.pageNoList[i] = i;
      }
    } else {
      if (this.pagination.pageNumber == 3) {
        let i = 0;
        for (i = 2; i < 4; i++) {
          this.pageNoList[i] = (this.pagination.pageNumber - 2) + i;
        }
        this.pageNoList[0] = 0;
        this.pageNoList[1] = 1;
        this.pageNoList[i] = this.totalPages - 2;
        this.pageNoList[i + 1] = this.totalPages - 1;
      } else if (this.pagination.pageNumber < 4) {
        let i = 0;
        for (i = 0; i <= 3; i++) {
          this.pageNoList[i] = i;
        }
        this.pageNoList[i] = this.totalPages - 2;
        this.pageNoList[i + 1] = this.totalPages - 1;
      }
      else if ((this.pagination.pageNumber + 3) >= this.totalPages) {
        let i = 0;
        for (i = 2; i < 5; i++) {
          this.pageNoList[i] = this.totalPages - 5 + i;
        }
        this.pageNoList[0] = 0;
        this.pageNoList[1] = 1;
      } else if ((this.pagination.pageNumber - 2) >= 1 && (this.pagination.pageNumber + 3) <= this.totalPages) {
        let i = 0;
        for (i = 2; i < 5; i++) {
          this.pageNoList[i] = (this.pagination.pageNumber - 3) + i;
        }
        this.pageNoList[0] = 0;
        this.pageNoList[1] = 1;
        this.pageNoList[i] = this.totalPages - 2;
        this.pageNoList[i + 1] = this.totalPages - 1;
      }
    }
  }

  checkboxButton(value: any, event: any) {
    event.stopPropagation();
    if (this.multiselect) {
      if (event.target.checked) {
        this.selectedDataArray.push(value)
      } else {
        const index = this.selectedDataArray.findIndex(x => x == value);
        this.selectedDataArray.splice(index, 1)
      }
      this.multiselectValue.emit(this.selectedDataArray);
    } else {
      this.selectedData = value;
      this.select.emit(value);
    }
  }


  getSelect(row: any) {
    if (this.multiselect) {
      const index = this.selectedDataArray.findIndex(x => x == row)
      return index == -1 ? false : true;
    }
    return this.selectedData == row;
  }

  buttonEventMultiSelect(event: string) {
    let data = {
      event: event,
      data: event == 'add' ? null : this.selectedDataArray
    }
    if (event == 'edit' || event == 'delete') {
      if (this.selectedDataArray != undefined && this.selectedDataArray != null && this.selectedDataArray.length != 0) {
        if (event == 'delete') {
          if (this.selectedDataArray.length == 1) {
            this.confrimationmodel.nativeElement.click();
            return
          } else {
            this.alertServices.error("Please select single record to proceed", this.alertOptions);
          }
        }
        else {
          if (this.selectedDataArray.length == 1) {
            this.buttonEvent1.emit(data);
          } else {
            this.alertServices.error("Please select single record to proceed", this.alertOptions);

          }
        }
        return;
      } else {
        this.alertServices.error("Please select a record", this.alertOptions);
        return
      }
    }
    this.buttonEvent1.emit(data);
  }

  changeOwner() {
    let data = {
      event: "changeOwner",
      data: this.multiselect ? this.selectedDataArray : this.selectedDataArray
    }
    if (this.multiselect) {
      
      if (this.selectedDataArray.length > 0) {
        // if(this.selectedDataArray.length > 1){
        //     this.alertServices.error("Please select single record to proceed",this.alertOptions);
        //     return
        // }else{
        this.buttonEvent1.emit(data);
        return
        // }

      } else {
        this.alertServices.error("Please select a record", this.alertOptions);
        return
      }
    } else {
      if (this.selectedData != "" && this.selectedData != undefined && this.selectedData != null) {
        this.buttonEvent1.emit(data);
        return
      } else {
        this.alertServices.error("Please select a record", this.alertOptions);
      }
    }
  }

  selectAll(event: any) {
    event.stopPropagation();
    let data = [...this.content];
    
    if (event.target.checked) {
      this.selectedDataArray = data;
    } else {
      this.selectedDataArray = [];
    }
  }
}
